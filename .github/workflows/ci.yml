name: CI

on:
  pull_request:
  push:
    branches: [main, curl-data]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-22.04
    needs:
      - check-dist-up-to-date
      - install-nix
      - install-with-non-default-source-inputs
      - install-no-id-token
    # NOTE(cole-h): GitHub treats "skipped" as "OK" for the purposes of required checks on branch
    # protection, so we take advantage of this fact and fail if any of the dependent actions failed,
    # or "skip" (which is a success for GHA's purposes) if none of them did.
    if: failure()
    steps:
      - name: Dependent checks failed
        run: exit 1

  check-dist-up-to-date:
    name: Check the dist/ folder is up to date
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - name: pnpm install
        run: nix develop --command pnpm install
      - name: prettier format
        run: nix develop --command pnpm run check-fmt
      - name: ESLint
        run: nix develop --command pnpm run lint
      - name: tsup build
        run: nix develop --command pnpm run build
      - name: ncc package
        run: nix develop --command pnpm run package
      - name: Git status
        run: git status --porcelain=v1
      - name: Ensure no staged changes
        run: git diff --exit-code

  install-nix:
    name: "Test: ${{ matrix.runner }}${{ matrix.determinate && ' with determinate' || '' }}"
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        determinate:
          - true
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: ./
        with:
          logger: pretty
          log-directives: nix_installer=trace
          backtrace: full
          _internal-strict-mode: true
          determinate: ${{ matrix.determinate }}
      - name: Breakpoint if tests failed
        uses: namespacelabs/breakpoint-action@v0
        with:
          duration: 30m
          authorized-users: grahamc

      - name: echo $PATH
        run: echo $PATH

      - name: Render the devshell
        if: success() || failure()
        run: |
          nix develop --command date

      - name: Test `nix` with `$GITHUB_PATH`
        if: success() || failure()
        run: |
          nix run nixpkgs#hello
          nix profile install nixpkgs#hello
          hello
          nix store gc
          nix run nixpkgs#hello

      - name: Test bash
        run: nix-instantiate -E 'builtins.currentTime' --eval
        if: success() || failure()
        shell: bash --login {0}
      - name: Test sh
        run: nix-instantiate -E 'builtins.currentTime' --eval
        if: success() || failure()
        shell: sh -l {0}
      - name: Test zsh
        run: if (zsh --help > /dev/null); then zsh --login --interactive -c "nix-instantiate -E 'builtins.currentTime' --eval"; fi
        if: success() || failure()
      - name: Install Nix again (noop)
        uses: ./
        with:
          logger: pretty
          log-directives: nix_installer=trace
          backtrace: full
          _internal-strict-mode: true
          determinate: ${{ matrix.determinate }}
      - name: Test `nix` with `$GITHUB_PATH`
        if: success() || failure()
        run: |
          nix run nixpkgs#hello
          nix profile install nixpkgs#hello
          hello
          nix store gc
          nix run nixpkgs#hello
      - name: Reinstall Nix
        uses: ./
        with:
          logger: pretty
          log-directives: nix_installer=trace
          backtrace: full
          reinstall: true
          extra-conf: |
            use-sqlite-wal = true
          _internal-strict-mode: true
          determinate: ${{ matrix.determinate }}
      - name: Test `nix` with `$GITHUB_PATH`
        if: success() || failure()
        run: |
          nix run nixpkgs#hello
          nix profile install nixpkgs#hello
          hello
          nix store gc
          nix run nixpkgs#hello
      - name: Verify the generated nix.conf
        run: |
          nix config show
          cat -n /etc/nix/nix.conf
          nix config show | grep -E "^trusted-users = .*$USER"
          nix config show | grep -E "^use-sqlite-wal = true"
