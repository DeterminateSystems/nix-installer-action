name: The Determinate Nix Installer
branding:
  icon: "box"
  color: "purple"
description: "Install Nix with the Determinate Nix Installer. See: https://github.com/DeterminateSystems/nix-installer"
inputs:
  backtrace:
    description: The setting for `RUST_BACKTRACE` (see https://doc.rust-lang.org/std/backtrace/index.html#environment-variables)
    required: false
  determinate:
    description: |
      Whether to install [Determinate Nix](https://determinate.systems/enterprise).
    default: false
  extra-args:
    description: Extra args to pass to the planner (prefer using structured `with:` arguments unless using a custom planner!)
    required: false
  extra-conf:
    description: Extra configuration lines for `/etc/nix/nix.conf` (includes `access-tokens` with `secrets.GITHUB_TOKEN` automatically if `github-token` is set)
    required: false
  flakehub:
    description: Automatically log in to your [FlakeHub](https://flakehub.com) account, for accessing private flakes.
    required: false
    default: false
  force-docker-shim:
    description: Force the use of Docker as a process supervisor. This setting is automatically enabled when necessary.
    required: false
    default: false
  github-token:
    description: A GitHub token for making authenticated requests (which have a higher rate-limit quota than unauthenticated requests)
    default: ${{ github.token }}
  github-server-url:
    description: The URL for the GitHub server, to use with the `github-token` token. Defaults to the current GitHub server, supporting GitHub Enterprise Server automatically. Only change this value if the provided `github-token` is for a different GitHub server than the current server.
    default: ${{ github.server_url }}
  init:
    description: "The init system to configure, requires `planner: linux-multi` (allowing the choice between `none` or `systemd`)"
    required: false
  kvm:
    description: Automatically configure the GitHub Actions Runner for NixOS test supports, if the host supports it.
    required: false
    default: true
  local-root:
    description: A local `nix-installer` binary root, overrides any settings which change the `nix-installer` used (binaries should be named `nix-installer-$ARCH-$OS`, eg. `nix-installer-x86_64-linux`)
    required: false
  log-directives:
    description: A list of Tracing directives, comma separated, `-`s replaced with `_` (eg. `nix_installer=trace`, see https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives)
    required: false
  logger:
    description: The logger to use for install (eg. `pretty`, `json`, `full`, `compact`)
    required: false
  ssl-cert-file:
    description: "An SSL cert to use (if any), used for fetching Nix and sets `NIX_SSL_CERT_FILE` for Nix"
    required: false
  proxy:
    description: "The proxy to use (if any), valid proxy bases are `https://$URL`, `http://$URL` and `socks5://$URL`"
    required: false
  mac-case-sensitive:
    description: "Use a case sensitive volume (`planner: macos` only)"
    required: false
  mac-encrypt:
    description: "Force encryption on the volume (`planner: macos` only)"
    required: false
  mac-root-disk:
    description: "The root disk of the target (`planner: macos` only)"
    required: false
  mac-volume-label:
    description: "The label for the created APFS volume (`planner: macos` only)"
    required: false
  modify-profile:
    description: Modify the user profile to automatically load nix
    required: false
    default: true
  nix-build-group-id:
    description: The Nix build group GID
    required: false
  nix-build-group-name:
    description: The Nix build group name
    required: false
  nix-build-user-base:
    description: The Nix build user base UID (ascending)
    required: false
  nix-build-user-count:
    description: Number of build users to create
    required: false
  nix-build-user-prefix:
    description: The Nix build user prefix (user numbers will be postfixed)
    required: false
  source-binary:
    description: Run a version of the nix-installer binary from somewhere already on disk. Conflicts with all other `source-*` options. Intended only for testing this Action.
    required: false
  source-branch:
    description: The branch of `nix-installer` to use (conflicts with `source-tag`, `source-revision`, `source-pr`)
    required: false
  source-pr:
    description: The PR of `nix-installer` to use (conflicts with `source-tag`, `source-revision`, `source-branch`)
    required: false
  source-revision:
    description: The revision of `nix-installer` to use (conflicts with `source-tag`, `source-branch`, `source-pr`)
    required: false
  source-tag:
    description: The tag of `nix-installer` to use (conflicts with `source-revision`, `source-branch`, `source-pr`)
    required: false
  source-url:
    description: A URL pointing to a `nix-installer` executable
    required: false
  nix-package-url:
    description: The Nix package URL
    required: false
  planner:
    description: A planner to use
    required: false
  reinstall:
    description: Force a reinstall if an existing installation is detected (consider backing up `/nix/store`)
    required: false
    default: false
  start-daemon:
    description: "If the daemon should be started, requires `planner: linux`"
    required: false
    default: true
  diagnostic-endpoint:
    description: "Diagnostic endpoint url where the installer sends data to. To disable set this to an empty string."
    required: false
    default: "-"
  trust-runner-user:
    description: Whether to make the runner user trusted by the Nix daemon
    default: true
  nix-installer-branch:
    description: (deprecated) The branch of `nix-installer` to use (conflicts with `nix-installer-tag`, `nix-installer-revision`, `nix-installer-pr`)
    required: false
  nix-installer-pr:
    description: (deprecated) The PR of `nix-installer` to use (conflicts with `nix-installer-tag`, `nix-installer-revision`, `nix-installer-branch`)
    required: false
  nix-installer-revision:
    description: (deprecated) The revision of `nix-installer` to use (conflicts with `nix-installer-tag`, `nix-installer-branch`, `nix-installer-pr`)
    required: false
  nix-installer-tag:
    description: (deprecated) The tag of `nix-installer` to use (conflicts with `nix-installer-revision`, `nix-installer-branch`, `nix-installer-pr`)
    required: false
  nix-installer-url:
    description: (deprecated) A URL pointing to a `nix-installer.sh` script
    required: false
  _internal-strict-mode:
    description: Whether to fail when any errors are thrown. Used only to test the Action; do not set this in your own workflows.
    required: false
    default: false

runs:
  using: "node20"
  main: "dist/index.js"
  post: "dist/index.js"
